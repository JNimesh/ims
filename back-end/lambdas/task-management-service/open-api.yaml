openapi: 3.0.1
info:
  title: Task Management Service
  description: API for managing tasks for patients, doctors, and administrators.
  version: 1.0.0

servers:
  - url: /prod

paths:
  /auth/login:
    post:
      operationId: postAuthLogin
      summary: Authenticate a user
      description: No roles are required to authenticate
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /tasks:
    post:
      summary: Create a new task
      tags:
        - Tasks
      operationId: postTasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '200':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /tasks/{taskId}:
    patch:
      tags:
        - Tasks
      summary: Update a task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      operationId: patchTaskById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Task'
  /doctor/{doctorId}/tasks:
    get:
      operationId: getDoctorTasks
      summary: Retrieve tasks assigned to a doctor
      tags:
        - Tasks
      parameters:
        - name: doctorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of tasks assigned to the doctor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /patient/{patientId}/tasks:
    get:
      operationId: getPatientTasks
      summary: Retrieve tasks for a patient
      tags:
        - Tasks
      parameters:
        - name: patientId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of tasks associated with the patient
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /tasks/{taskId}/images:
    post:
      summary: Upload an image for a task
      tags:
        - Images
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      operationId: postTaskImages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostImageRequest'
      responses:
        '201':
          description: Image uploaded successfully
    get:
      tags:
        - Images
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      summary: Get images for a task
      operationId: getTaskImages
      responses:
        '200':
          description: List of images with pre-signed URLs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'

  /users:
    post:
      operationId: postUsers
      summary: Create a new user (patient or doctor)
      description: Roles Allowed **Admin**
      tags:
        - Users (Admin Access Only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    put:
      operationId: putUserById
      summary: Update details of an existing user
      description: Roles Allowed **Admin**
      tags:
        - Users (Admin Access Only)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: deleteUserById
      summary: Remove a user
      description: Roles Allowed **Admin**
      tags:
        - Users (Admin Access Only)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User removed

  /consultation-types:
    post:
      operationId: postConsultationTypes
      summary: Add a new consultation type
      description: Roles Allowed **Admin**
      tags:
        - Consultation Types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsultationTypeRequest'
      responses:
        '201':
          description: Consultation type added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsultationType'
    get:
      operationId: getConsultationTypes
      summary: Retrieve all consultation types
      tags:
        - Consultation Types
      responses:
        '200':
          description: List of consultation types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsultationType'

  /consultation-types/{id}:
    put:
      operationId: putConsultationTypeById
      summary: Update a consultation type
      tags:
        - Consultation Types
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: "Updated Consultation"
                description:
                  type: string
                  example: "Updated description"
                price:
                  type: number
                  example: 120.0
      responses:
        '200':
          description: Consultation type updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsultationType'
  /financial-records:
    get:
      operationId: fetchFinancialRecords
      summary: Retrieve financial records by duration (daily or monthly)
      description: |
        Fetch financial records for a specific duration. Duration must be in either `DD-MM-YYYY` (daily) or `MM-YYYY` (monthly) format. You can optionally filter by `consultationType`.
      tags:
        - Financial Records
      parameters:
        - name: duration
          in: query
          required: true
          description: The duration in `DD-MM-YYYY` (daily) or `MM-YYYY` (monthly) format.
          schema:
            type: string
            example: "12-2023"
        - name: consultationType
          in: query
          required: false
          description: Filter financial records by consultation type.
          schema:
            type: string
            example: "consultation_type_1"
      responses:
        '200':
          description: List of financial records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinancialRecord'
  /doctor-competencies/bulk:
    post:
      operationId: createDoctorCompetencies
      summary: Create multiple doctor competencies
      tags:
        - Doctor Competencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                competencies:
                  type: array
                  items:
                    type: object
                    properties:
                      doctorId:
                        type: string
                        example: "doctor-id-123"
                      consultationTypeId:
                        type: string
                        example: "consultation-type-id-456"
                    required:
                      - doctorId
                      - consultationTypeId
              required:
                - competencies
      responses:
        '201':
          description: Doctor competencies created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DoctorCompetency'
  /doctors:
    get:
      operationId: listDoctorsByConsultationType
      summary: List doctors by consultation type
      description: Fetch a list of doctors who are competent in a specific consultation type.
      tags:
        - Doctors
      parameters:
        - name: consultationTypeId
          in: query
          required: true
          description: ID of the consultation type to filter doctors
          schema:
            type: string
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: List of doctors for the given consultation type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        idToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
        expiresIn:
          type: integer
    Task:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          example: "Consultation type id"
        status:
          type: string
          enum:
            - Open
            - Closed
          example: "Open"
        patientId:
          type: string
        doctorId:
          type: string
          nullable: true
        price:
          type: number
          format: float
        notes:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    CreateTaskRequest:
      type: object
      properties:
        type:
          type: string
        status:
          type: string
          enum:
            - Open
            - Closed
        patientId:
          type: string
        doctorId:
          type: string
          nullable: true
        price:
          type: number
          format: float
        notes:
          type: string

    UpdateTaskRequest:
      type: object
      properties:
        status:
          type: string
        doctorId:
          type: string
          nullable: true
        price:
          type: number
          format: float
        notes:
          type: string

    Image:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        signedUrl:
          type: string
        url:
          type: string
        patientId:
          type: string
        taskId:
          type: string
          nullable: true
        createdAt:
          type: string
        updatedAt:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
    ConsultationTypeRequest:
      type: object
      properties:
        type:
          type: string
        description:
          type: string
        price:
          type: number
    ConsultationType:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        description:
          type: string
        price:
          type: number
        createdAt:
          type: string
        updatedAt:
          type: string
    PostImageRequest:
      type: object
      properties:
        patientId:
          type: string
        base64Data:
          type: string
          description: "Base64 encoded string of the image"
        type:
          type: string
          example: "image/png"
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: [ PATIENT, DOCTOR ]
    FinancialRecord:
      type: object
      properties:
        id:
          type: string
        consultationType:
          type: string
        patientCount:
          type: integer
        taskCount:
          type: integer
        totalRevenue:
          type: number
        duration:
          type: string
        updatedAt:
          type: string
    DoctorCompetency:
      type: object
      properties:
        id:
          type: string
          example: "a1b2c3d4-5678-90ab-cdef-1234567890ab"
        doctorId:
          type: string
          example: "doctor-id-123"
        consultationTypeId:
          type: string
          example: "consultation-type-id-456"
    Doctor:
      type: object
      properties:
        id:
          type: string
          example: "doctor-123e4567-e89b-12d3-a456"
        name:
          type: string
          example: "Dr. John Doe"
        email:
          type: string
          example: "johndoe@example.com"
        phone:
          type: string
          example: "+1234567890"
        competencies:
          type: array
          items:
            type: object
            properties:
              consultationTypeId:
                type: string
                example: "consultationType-123e4567"
              consultationType:
                type: object
                properties:
                  type:
                    type: string
                    example: "General Consultation"
                  description:
                    type: string
                    example: "Consultation for general health concerns"
                  price:
                    type: number
                    example: 50.00

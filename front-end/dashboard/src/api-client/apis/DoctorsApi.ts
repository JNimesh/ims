/* tslint:disable */
/* eslint-disable */
/**
 * Task Management Service
 * API for managing tasks for patients, doctors, and administrators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Doctor,
} from '../models/index';
import {
    DoctorFromJSON,
    DoctorToJSON,
} from '../models/index';

export interface ListDoctorsByConsultationTypeRequest {
    consultationTypeId: string;
}

/**
 * 
 */
export class DoctorsApi extends runtime.BaseAPI {

    /**
     * Fetch a list of doctors who are competent in a specific consultation type.
     * List doctors by consultation type
     */
    async listDoctorsByConsultationTypeRaw(requestParameters: ListDoctorsByConsultationTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Doctor>>> {
        if (requestParameters['consultationTypeId'] == null) {
            throw new runtime.RequiredError(
                'consultationTypeId',
                'Required parameter "consultationTypeId" was null or undefined when calling listDoctorsByConsultationType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['consultationTypeId'] != null) {
            queryParameters['consultationTypeId'] = requestParameters['consultationTypeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DoctorFromJSON));
    }

    /**
     * Fetch a list of doctors who are competent in a specific consultation type.
     * List doctors by consultation type
     */
    async listDoctorsByConsultationType(requestParameters: ListDoctorsByConsultationTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Doctor>> {
        const response = await this.listDoctorsByConsultationTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

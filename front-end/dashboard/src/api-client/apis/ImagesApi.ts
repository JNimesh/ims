/* tslint:disable */
/* eslint-disable */
/**
 * Task Management Service
 * API for managing tasks for patients, doctors, and administrators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Image,
  PostImageRequest,
} from '../models/index';
import {
    ImageFromJSON,
    ImageToJSON,
    PostImageRequestFromJSON,
    PostImageRequestToJSON,
} from '../models/index';

export interface GetTaskImagesRequest {
    taskId: string;
}

export interface PostTaskImagesRequest {
    taskId: string;
    postImageRequest: PostImageRequest;
}

/**
 * 
 */
export class ImagesApi extends runtime.BaseAPI {

    /**
     * Get images for a task
     */
    async getTaskImagesRaw(requestParameters: GetTaskImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Image>>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling getTaskImages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{taskId}/images`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImageFromJSON));
    }

    /**
     * Get images for a task
     */
    async getTaskImages(requestParameters: GetTaskImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Image>> {
        const response = await this.getTaskImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload an image for a task
     */
    async postTaskImagesRaw(requestParameters: PostTaskImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling postTaskImages().'
            );
        }

        if (requestParameters['postImageRequest'] == null) {
            throw new runtime.RequiredError(
                'postImageRequest',
                'Required parameter "postImageRequest" was null or undefined when calling postTaskImages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks/{taskId}/images`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostImageRequestToJSON(requestParameters['postImageRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload an image for a task
     */
    async postTaskImages(requestParameters: PostTaskImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postTaskImagesRaw(requestParameters, initOverrides);
    }

}

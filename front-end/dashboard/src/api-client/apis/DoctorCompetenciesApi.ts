/* tslint:disable */
/* eslint-disable */
/**
 * Task Management Service
 * API for managing tasks for patients, doctors, and administrators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDoctorCompetencies201Response,
  CreateDoctorCompetenciesRequest,
} from '../models/index';
import {
    CreateDoctorCompetencies201ResponseFromJSON,
    CreateDoctorCompetencies201ResponseToJSON,
    CreateDoctorCompetenciesRequestFromJSON,
    CreateDoctorCompetenciesRequestToJSON,
} from '../models/index';

export interface CreateDoctorCompetenciesOperationRequest {
    createDoctorCompetenciesRequest: CreateDoctorCompetenciesRequest;
}

/**
 * 
 */
export class DoctorCompetenciesApi extends runtime.BaseAPI {

    /**
     * Create multiple doctor competencies
     */
    async createDoctorCompetenciesRaw(requestParameters: CreateDoctorCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateDoctorCompetencies201Response>> {
        if (requestParameters['createDoctorCompetenciesRequest'] == null) {
            throw new runtime.RequiredError(
                'createDoctorCompetenciesRequest',
                'Required parameter "createDoctorCompetenciesRequest" was null or undefined when calling createDoctorCompetencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctor-competencies/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDoctorCompetenciesRequestToJSON(requestParameters['createDoctorCompetenciesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDoctorCompetencies201ResponseFromJSON(jsonValue));
    }

    /**
     * Create multiple doctor competencies
     */
    async createDoctorCompetencies(requestParameters: CreateDoctorCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateDoctorCompetencies201Response> {
        const response = await this.createDoctorCompetenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

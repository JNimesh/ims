/* tslint:disable */
/* eslint-disable */
/**
 * Task Management Service
 * API for managing tasks for patients, doctors, and administrators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTaskRequest,
  Task,
  UpdateTaskRequest,
} from '../models/index';
import {
    CreateTaskRequestFromJSON,
    CreateTaskRequestToJSON,
    TaskFromJSON,
    TaskToJSON,
    UpdateTaskRequestFromJSON,
    UpdateTaskRequestToJSON,
} from '../models/index';

export interface GetDoctorTasksRequest {
    doctorId: string;
}

export interface GetPatientTasksRequest {
    patientId: string;
}

export interface PatchTaskByIdRequest {
    taskId: string;
    updateTaskRequest: UpdateTaskRequest;
}

export interface PostTasksRequest {
    createTaskRequest: CreateTaskRequest;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * Retrieve tasks assigned to a doctor
     */
    async getDoctorTasksRaw(requestParameters: GetDoctorTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Task>>> {
        if (requestParameters['doctorId'] == null) {
            throw new runtime.RequiredError(
                'doctorId',
                'Required parameter "doctorId" was null or undefined when calling getDoctorTasks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/doctor/{doctorId}/tasks`.replace(`{${"doctorId"}}`, encodeURIComponent(String(requestParameters['doctorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     * Retrieve tasks assigned to a doctor
     */
    async getDoctorTasks(requestParameters: GetDoctorTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Task>> {
        const response = await this.getDoctorTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve tasks for a patient
     */
    async getPatientTasksRaw(requestParameters: GetPatientTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Task>>> {
        if (requestParameters['patientId'] == null) {
            throw new runtime.RequiredError(
                'patientId',
                'Required parameter "patientId" was null or undefined when calling getPatientTasks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/patient/{patientId}/tasks`.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters['patientId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     * Retrieve tasks for a patient
     */
    async getPatientTasks(requestParameters: GetPatientTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Task>> {
        const response = await this.getPatientTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a task
     */
    async patchTaskByIdRaw(requestParameters: PatchTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling patchTaskById().'
            );
        }

        if (requestParameters['updateTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'updateTaskRequest',
                'Required parameter "updateTaskRequest" was null or undefined when calling patchTaskById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTaskRequestToJSON(requestParameters['updateTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Update a task
     */
    async patchTaskById(requestParameters: PatchTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.patchTaskByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new task
     */
    async postTasksRaw(requestParameters: PostTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters['createTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'createTaskRequest',
                'Required parameter "createTaskRequest" was null or undefined when calling postTasks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskRequestToJSON(requestParameters['createTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Create a new task
     */
    async postTasks(requestParameters: PostTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.postTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

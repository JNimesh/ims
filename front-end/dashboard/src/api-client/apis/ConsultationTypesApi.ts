/* tslint:disable */
/* eslint-disable */
/**
 * Task Management Service
 * API for managing tasks for patients, doctors, and administrators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConsultationType,
  ConsultationTypeRequest,
  PutConsultationTypeByIdRequest,
} from '../models/index';
import {
    ConsultationTypeFromJSON,
    ConsultationTypeToJSON,
    ConsultationTypeRequestFromJSON,
    ConsultationTypeRequestToJSON,
    PutConsultationTypeByIdRequestFromJSON,
    PutConsultationTypeByIdRequestToJSON,
} from '../models/index';

export interface PostConsultationTypesRequest {
    consultationTypeRequest: ConsultationTypeRequest;
}

export interface PutConsultationTypeByIdOperationRequest {
    id: string;
    putConsultationTypeByIdRequest: PutConsultationTypeByIdRequest;
}

/**
 * 
 */
export class ConsultationTypesApi extends runtime.BaseAPI {

    /**
     * Retrieve all consultation types
     */
    async getConsultationTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ConsultationType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/consultation-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConsultationTypeFromJSON));
    }

    /**
     * Retrieve all consultation types
     */
    async getConsultationTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ConsultationType>> {
        const response = await this.getConsultationTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Roles Allowed **Admin**
     * Add a new consultation type
     */
    async postConsultationTypesRaw(requestParameters: PostConsultationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsultationType>> {
        if (requestParameters['consultationTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'consultationTypeRequest',
                'Required parameter "consultationTypeRequest" was null or undefined when calling postConsultationTypes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/consultation-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsultationTypeRequestToJSON(requestParameters['consultationTypeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsultationTypeFromJSON(jsonValue));
    }

    /**
     * Roles Allowed **Admin**
     * Add a new consultation type
     */
    async postConsultationTypes(requestParameters: PostConsultationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsultationType> {
        const response = await this.postConsultationTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a consultation type
     */
    async putConsultationTypeByIdRaw(requestParameters: PutConsultationTypeByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsultationType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putConsultationTypeById().'
            );
        }

        if (requestParameters['putConsultationTypeByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'putConsultationTypeByIdRequest',
                'Required parameter "putConsultationTypeByIdRequest" was null or undefined when calling putConsultationTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/consultation-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutConsultationTypeByIdRequestToJSON(requestParameters['putConsultationTypeByIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsultationTypeFromJSON(jsonValue));
    }

    /**
     * Update a consultation type
     */
    async putConsultationTypeById(requestParameters: PutConsultationTypeByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsultationType> {
        const response = await this.putConsultationTypeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

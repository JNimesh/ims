/* tslint:disable */
/* eslint-disable */
/**
 * Task Management Service
 * API for managing tasks for patients, doctors, and administrators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    status?: TaskStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    patientId?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    doctorId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    price?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    updatedAt?: string;
}


/**
 * @export
 */
export const TaskStatusEnum = {
    Open: 'Open',
    Closed: 'Closed'
} as const;
export type TaskStatusEnum = typeof TaskStatusEnum[keyof typeof TaskStatusEnum];


/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): value is Task {
    return true;
}

export function TaskFromJSON(json: any): Task {
    return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'status': json['status'] == null ? undefined : json['status'],
        'patientId': json['patientId'] == null ? undefined : json['patientId'],
        'doctorId': json['doctorId'] == null ? undefined : json['doctorId'],
        'price': json['price'] == null ? undefined : json['price'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'updatedAt': json['updatedAt'] == null ? undefined : json['updatedAt'],
    };
}

export function TaskToJSON(json: any): Task {
    return TaskToJSONTyped(json, false);
}

export function TaskToJSONTyped(value?: Task | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'status': value['status'],
        'patientId': value['patientId'],
        'doctorId': value['doctorId'],
        'price': value['price'],
        'notes': value['notes'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
    };
}


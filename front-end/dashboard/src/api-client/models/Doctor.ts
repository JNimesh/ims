/* tslint:disable */
/* eslint-disable */
/**
 * Task Management Service
 * API for managing tasks for patients, doctors, and administrators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DoctorCompetenciesInner } from './DoctorCompetenciesInner';
import {
    DoctorCompetenciesInnerFromJSON,
    DoctorCompetenciesInnerFromJSONTyped,
    DoctorCompetenciesInnerToJSON,
    DoctorCompetenciesInnerToJSONTyped,
} from './DoctorCompetenciesInner';

/**
 * 
 * @export
 * @interface Doctor
 */
export interface Doctor {
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    phone?: string;
    /**
     * 
     * @type {Array<DoctorCompetenciesInner>}
     * @memberof Doctor
     */
    competencies?: Array<DoctorCompetenciesInner>;
}

/**
 * Check if a given object implements the Doctor interface.
 */
export function instanceOfDoctor(value: object): value is Doctor {
    return true;
}

export function DoctorFromJSON(json: any): Doctor {
    return DoctorFromJSONTyped(json, false);
}

export function DoctorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Doctor {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'competencies': json['competencies'] == null ? undefined : ((json['competencies'] as Array<any>).map(DoctorCompetenciesInnerFromJSON)),
    };
}

export function DoctorToJSON(json: any): Doctor {
    return DoctorToJSONTyped(json, false);
}

export function DoctorToJSONTyped(value?: Doctor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'email': value['email'],
        'phone': value['phone'],
        'competencies': value['competencies'] == null ? undefined : ((value['competencies'] as Array<any>).map(DoctorCompetenciesInnerToJSON)),
    };
}

